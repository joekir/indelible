// Code generated by protoc-gen-go. DO NOT EDIT.
// source: indelible.proto

package servicepb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogFileRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogFileRequest) Reset()         { *m = LogFileRequest{} }
func (m *LogFileRequest) String() string { return proto.CompactTextString(m) }
func (*LogFileRequest) ProtoMessage()    {}
func (*LogFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4d1edf48a5ce64, []int{0}
}

func (m *LogFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogFileRequest.Unmarshal(m, b)
}
func (m *LogFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogFileRequest.Marshal(b, m, deterministic)
}
func (m *LogFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogFileRequest.Merge(m, src)
}
func (m *LogFileRequest) XXX_Size() int {
	return xxx_messageInfo_LogFileRequest.Size(m)
}
func (m *LogFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogFileRequest proto.InternalMessageInfo

func (m *LogFileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*LogFileRequest)(nil), "servicepb.LogFileRequest")
}

func init() { proto.RegisterFile("indelible.proto", fileDescriptor_0e4d1edf48a5ce64) }

var fileDescriptor_0e4d1edf48a5ce64 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8e, 0xc1, 0x0a, 0x82, 0x40,
	0x10, 0x86, 0x13, 0x22, 0x70, 0x82, 0x0e, 0x7b, 0x88, 0xb2, 0x4b, 0x48, 0x87, 0x4e, 0x23, 0xd4,
	0x0b, 0x84, 0x51, 0x74, 0x90, 0x10, 0xdf, 0x40, 0x6d, 0x5a, 0x05, 0x65, 0xb6, 0x75, 0x2d, 0x7a,
	0xfb, 0xd8, 0x95, 0x82, 0x4e, 0xf3, 0xc3, 0x7c, 0x33, 0xdf, 0x0f, 0xd3, 0x8a, 0x6f, 0xa4, 0x51,
	0x69, 0x36, 0x2c, 0xfc, 0x8e, 0xf4, 0xb3, 0x2e, 0x49, 0x15, 0xc1, 0x4a, 0x32, 0xcb, 0x86, 0x22,
	0xb7, 0x28, 0xfa, 0x7b, 0x44, 0xad, 0x32, 0xef, 0x81, 0x0b, 0x37, 0x30, 0x4b, 0x58, 0x9e, 0xeb,
	0x86, 0x32, 0x7a, 0xf4, 0xd4, 0x19, 0x21, 0x60, 0x9c, 0xe6, 0xa6, 0x5a, 0x78, 0x6b, 0x6f, 0xeb,
	0x67, 0x2e, 0xef, 0xae, 0x00, 0x09, 0xcb, 0xa3, 0xa6, 0xdc, 0xb0, 0x16, 0x07, 0xf0, 0x5d, 0xa4,
	0x84, 0xa5, 0x58, 0xe2, 0xcf, 0x84, 0xff, 0x9f, 0x82, 0x39, 0x0e, 0x66, 0xfc, 0x9a, 0xf1, 0x64,
	0xcd, 0xe1, 0x28, 0x0e, 0x41, 0x94, 0xdc, 0xe2, 0xab, 0xaa, 0x0d, 0xb1, 0xea, 0xd0, 0x35, 0x8f,
	0xe1, 0x62, 0x47, 0x6a, 0xe1, 0xd4, 0x2b, 0x26, 0xee, 0x6a, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x67, 0x18, 0x68, 0x44, 0xd7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogCreatorClient is the client API for LogCreator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogCreatorClient interface {
	CreateLog(ctx context.Context, in *LogFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type logCreatorClient struct {
	cc *grpc.ClientConn
}

func NewLogCreatorClient(cc *grpc.ClientConn) LogCreatorClient {
	return &logCreatorClient{cc}
}

func (c *logCreatorClient) CreateLog(ctx context.Context, in *LogFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicepb.LogCreator/CreateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogCreatorServer is the server API for LogCreator service.
type LogCreatorServer interface {
	CreateLog(context.Context, *LogFileRequest) (*empty.Empty, error)
}

func RegisterLogCreatorServer(s *grpc.Server, srv LogCreatorServer) {
	s.RegisterService(&_LogCreator_serviceDesc, srv)
}

func _LogCreator_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogCreatorServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepb.LogCreator/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogCreatorServer).CreateLog(ctx, req.(*LogFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogCreator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servicepb.LogCreator",
	HandlerType: (*LogCreatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLog",
			Handler:    _LogCreator_CreateLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indelible.proto",
}
